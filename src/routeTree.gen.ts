/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VisualizeImport } from './routes/visualize'
import { Route as Undistort2Import } from './routes/undistort2'
import { Route as UndistortImport } from './routes/undistort'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as SetupIndexImport } from './routes/setup/index'
import { Route as SetupUrlEntryImport } from './routes/setup.url-entry'
import { Route as SetupSetupImport } from './routes/setup/setup'
import { Route as SetupPointSelectionImport } from './routes/setup/point-selection'

// Create/Update Routes

const VisualizeRoute = VisualizeImport.update({
  id: '/visualize',
  path: '/visualize',
  getParentRoute: () => rootRoute,
} as any)

const Undistort2Route = Undistort2Import.update({
  id: '/undistort2',
  path: '/undistort2',
  getParentRoute: () => rootRoute,
} as any)

const UndistortRoute = UndistortImport.update({
  id: '/undistort',
  path: '/undistort',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SetupIndexRoute = SetupIndexImport.update({
  id: '/setup/',
  path: '/setup/',
  getParentRoute: () => rootRoute,
} as any)

const SetupUrlEntryRoute = SetupUrlEntryImport.update({
  id: '/setup/url-entry',
  path: '/setup/url-entry',
  getParentRoute: () => rootRoute,
} as any)

const SetupSetupRoute = SetupSetupImport.update({
  id: '/setup/setup',
  path: '/setup/setup',
  getParentRoute: () => rootRoute,
} as any)

const SetupPointSelectionRoute = SetupPointSelectionImport.update({
  id: '/setup/point-selection',
  path: '/setup/point-selection',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/undistort': {
      id: '/undistort'
      path: '/undistort'
      fullPath: '/undistort'
      preLoaderRoute: typeof UndistortImport
      parentRoute: typeof rootRoute
    }
    '/undistort2': {
      id: '/undistort2'
      path: '/undistort2'
      fullPath: '/undistort2'
      preLoaderRoute: typeof Undistort2Import
      parentRoute: typeof rootRoute
    }
    '/visualize': {
      id: '/visualize'
      path: '/visualize'
      fullPath: '/visualize'
      preLoaderRoute: typeof VisualizeImport
      parentRoute: typeof rootRoute
    }
    '/setup/point-selection': {
      id: '/setup/point-selection'
      path: '/setup/point-selection'
      fullPath: '/setup/point-selection'
      preLoaderRoute: typeof SetupPointSelectionImport
      parentRoute: typeof rootRoute
    }
    '/setup/setup': {
      id: '/setup/setup'
      path: '/setup/setup'
      fullPath: '/setup/setup'
      preLoaderRoute: typeof SetupSetupImport
      parentRoute: typeof rootRoute
    }
    '/setup/url-entry': {
      id: '/setup/url-entry'
      path: '/setup/url-entry'
      fullPath: '/setup/url-entry'
      preLoaderRoute: typeof SetupUrlEntryImport
      parentRoute: typeof rootRoute
    }
    '/setup/': {
      id: '/setup/'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof SetupIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/undistort': typeof UndistortRoute
  '/undistort2': typeof Undistort2Route
  '/visualize': typeof VisualizeRoute
  '/setup/point-selection': typeof SetupPointSelectionRoute
  '/setup/setup': typeof SetupSetupRoute
  '/setup/url-entry': typeof SetupUrlEntryRoute
  '/setup': typeof SetupIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/undistort': typeof UndistortRoute
  '/undistort2': typeof Undistort2Route
  '/visualize': typeof VisualizeRoute
  '/setup/point-selection': typeof SetupPointSelectionRoute
  '/setup/setup': typeof SetupSetupRoute
  '/setup/url-entry': typeof SetupUrlEntryRoute
  '/setup': typeof SetupIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/undistort': typeof UndistortRoute
  '/undistort2': typeof Undistort2Route
  '/visualize': typeof VisualizeRoute
  '/setup/point-selection': typeof SetupPointSelectionRoute
  '/setup/setup': typeof SetupSetupRoute
  '/setup/url-entry': typeof SetupUrlEntryRoute
  '/setup/': typeof SetupIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/undistort'
    | '/undistort2'
    | '/visualize'
    | '/setup/point-selection'
    | '/setup/setup'
    | '/setup/url-entry'
    | '/setup'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/undistort'
    | '/undistort2'
    | '/visualize'
    | '/setup/point-selection'
    | '/setup/setup'
    | '/setup/url-entry'
    | '/setup'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/undistort'
    | '/undistort2'
    | '/visualize'
    | '/setup/point-selection'
    | '/setup/setup'
    | '/setup/url-entry'
    | '/setup/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  UndistortRoute: typeof UndistortRoute
  Undistort2Route: typeof Undistort2Route
  VisualizeRoute: typeof VisualizeRoute
  SetupPointSelectionRoute: typeof SetupPointSelectionRoute
  SetupSetupRoute: typeof SetupSetupRoute
  SetupUrlEntryRoute: typeof SetupUrlEntryRoute
  SetupIndexRoute: typeof SetupIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  UndistortRoute: UndistortRoute,
  Undistort2Route: Undistort2Route,
  VisualizeRoute: VisualizeRoute,
  SetupPointSelectionRoute: SetupPointSelectionRoute,
  SetupSetupRoute: SetupSetupRoute,
  SetupUrlEntryRoute: SetupUrlEntryRoute,
  SetupIndexRoute: SetupIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/undistort",
        "/undistort2",
        "/visualize",
        "/setup/point-selection",
        "/setup/setup",
        "/setup/url-entry",
        "/setup/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/undistort": {
      "filePath": "undistort.tsx"
    },
    "/undistort2": {
      "filePath": "undistort2.tsx"
    },
    "/visualize": {
      "filePath": "visualize.tsx"
    },
    "/setup/point-selection": {
      "filePath": "setup/point-selection.tsx"
    },
    "/setup/setup": {
      "filePath": "setup/setup.tsx"
    },
    "/setup/url-entry": {
      "filePath": "setup.url-entry.tsx"
    },
    "/setup/": {
      "filePath": "setup/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
